name: Create New Feature Branch with Specific Changes

on:
  push:
    branches:
      - FSB  # Trigger workflow when code is pushed to the FSB branch

jobs:
  create-branch:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the FSB branch
      - name: Checkout FSB branch
        uses: actions/checkout@v4
        with:
          ref: FSB

      # Step 2: Set up Git user identity
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@example.com"

      # Step 3: Generate a unique branch name
      - name: Generate a unique branch name
        id: branch_name
        run: |
          BRANCH_NAME="feature-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      # Step 4: Create the new branch from the latest commit in FSB
      - name: Create new branch
        run: |
          git checkout -b $BRANCH_NAME  # Create a new branch based on FSB

      # Step 5: Debugging to list all files in the latest commit to check for 'test.txt'
      - name: List files in the latest commit
        run: |
          echo "Files in the latest commit:"
          git ls-tree --name-only HEAD
          
      # Step 6: List the changed or newly added files in FSB (between last commit and current)
      - name: Get changed files
        id: get_changed_files
        run: |
          # Fetch the latest changes and detect modified/new files
          git fetch --unshallow || echo "Not a shallow repository, proceeding with normal diff"
          
          # List the changed files in the latest commit on FSB
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD || echo "No changes found or shallow repo")
          
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Changed files: $CHANGED_FILES"

          # Debugging: List all files that are in the working directory (new file check)
          echo "Files in working directory:"
          ls -la

      # Step 7: Reset to relevant changes
      - name: Reset to relevant changes
        run: |
          # Reset the repository so that we are only working with the files changed in the last commit
          git reset --hard HEAD~1  # Go back one commit to reset the working directory

          # Checkout only the files that were changed or newly added
          for FILE in $CHANGED_FILES; do
            if [ -f "$FILE" ]; then
              echo "Checking out file: $FILE"
              git checkout HEAD -- $FILE
            else
              echo "File $FILE does not exist in the current commit"
            fi
          done
          
          # Stage the changes for commit
          git add .
          
          # Debugging: Check the status to ensure files are staged
          git status

      # Step 8: Commit and push the new branch (only if changes exist)
      - name: Commit and push new branch
        run: |
          # Check if there are staged changes before committing
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Create new feature branch with only modified and new files"
            git push origin $BRANCH_NAME
          fi
