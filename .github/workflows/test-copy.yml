name: Copy Files to Network Share, Wait for Approval, and Commit to Main Branch

on:
  workflow_dispatch:
    inputs:
      Source_Folder:
        description: "Comma-separated list of branch/files/folders (e.g. 'copybranch/Dockerfile,copybranch/src/config.json,copybranch/src/folder')"
        required: true
        default: "copybranch/Dockerfile,copybranch/src/config.json"
      Target_Folder:
        description: "Network share path for the copied files (e.g. '\\\\network\\share\\target')"
        required: true
        default: "temp"

jobs:
  copy-to-network-share:
    runs-on: windows-latest  # Windows runner
    steps:
      # Step 1: Checkout the source branch
      - name: Checkout Source Branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref }}

      # Step 2: Create Main Directory on Network Share
      - name: Create Main Directory on Network Share
        shell: pwsh
        run: |
          $targetDir = "${{ github.event.inputs.Target_Folder }}"
          if (!(Test-Path $targetDir)) {
            Write-Host "Creating Main directory: $targetDir"
            New-Item -ItemType Directory -Path $targetDir
          } else {
            Write-Host "Main directory already exists: $targetDir"
          }

      # Step 3: Delete Existing Files from Target Directory
      - name: Delete Existing Files from Directory
        shell: pwsh
        run: |
          $targetDir = "${{ github.event.inputs.Target_Folder }}"
          Write-Host "Deleting existing files in Main directory: $targetDir"
          Get-ChildItem -Path $targetDir -Recurse | Remove-Item -Force -Recurse

      # Step 4: Create Validation Directory on Network Share
      - name: Create Validation Directory on Network Share
        shell: pwsh
        run: |
          $targetDir = "${{ github.event.inputs.Target_Folder }}\test-validation"
          if (!(Test-Path $targetDir)) {
            Write-Host "Creating Validation directory: $targetDir"
            New-Item -ItemType Directory -Path $targetDir
          } else {
            Write-Host "Validation directory already exists: $targetDir"
          }

      # Step 5: Copy Files/Folders to Network Share
      - name: Copy Files/Folders to Network Share
        shell: pwsh
        run: |
           $targetDir = "${{ github.event.inputs.Target_Folder }}"
           # Split the comma-separated list of source paths
            $sourcePaths = "${{ github.event.inputs.Source_Folder }}" -split ","
            foreach ($sourcePath in $sourcePaths) {
                # Split each source path into branch and file/folder path
                $parts = $sourcePath -split "/"
                $branch = $parts[0]
                $path = $parts[1]
                # Log the branch and path to be processed
                Write-Host "Checking out branch: $branch"
                
                # Fetch and checkout the specified branch
                git fetch origin $branch
                git checkout $branch

                # Check if the path is a file or directory
                if (Test-Path $path -PathType Leaf) {
                    # It's a file
                    Write-Host "Copying file: $path"
                    $originalFileName = $path
                    $myrev = $env:GITHUB_RUN_NUMBER  # Use GitHub Run Number or another unique identifier
                    
                    # Create a new unique name for the file
                    $name = (Get-Item $originalFileName).BaseName + "-" + $myrev + (Get-Item $originalFileName).Extension
                    $targetFilePath = "$targetDir\$name"
                    
                    # Copy the file to the target folder
                    Copy-Item $originalFileName -Destination $targetFilePath -Force
                    # Verify that the file exists in the target folder
                    if (Test-Path $targetFilePath) {
                        Write-Host "File copied successfully: $targetFilePath"
                    } else {
                        Write-Host "Error: File was not copied to $targetFilePath"
                        exit 1  # Exit with error if file doesn't exist
                    }
                }
                elseif (Test-Path $path -PathType Container) {
                    # It's a directory
                    Write-Host "Copying directory: $path"
                    # Get all files in the directory, including subdirectories
                    $files = Get-ChildItem -Path $path -Recurse -File
                    foreach ($file in $files) {
                        $originalFileName = $file.FullName
                        $myrev = $env:GITHUB_RUN_NUMBER  # Use GitHub Run Number or another unique identifier
                        
                        # Create a new unique name for the file
                        $name = $file.BaseName + "-" + $myrev + $file.Extension
                        $targetFilePath = "$targetDir\$name"
                        
                        # Log the file that's being copied
                        Write-Host "Copying file: $originalFileName to $targetFilePath"
                        # Copy the file to the target folder with the new name
                        Copy-Item $originalFileName -Destination $targetFilePath -Force
                        # Verify that the file exists in the target folder
                        if (Test-Path $targetFilePath) {
                            Write-Host "File copied successfully: $targetFilePath"
                        } else {
                            Write-Host "Error: File was not copied to $targetFilePath"
                            exit 1  # Exit with error if file doesn't exist
                        }
                    }
                } else {
                    Write-Host "Error: The path $path is neither a valid file nor a directory."
                    exit 1
                }
            }

            # List all files in the target folder sorted by modification time (like `ls -ltr`)
            Write-Host "Listing all files in target folder sorted by modification time:"
            Get-ChildItem -Path $targetDir | Sort-Object LastWriteTime -Descending | Format-Table Name, Length, LastWriteTime
